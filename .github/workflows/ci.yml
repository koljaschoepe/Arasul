name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  actions: read
  contents: read
  security-events: write

env:
  NODE_VERSION: '20'
  SESSION_SECRET: 'test-secret-for-ci'
  # Für Prisma/SQLite in CI: relativ zum Arbeitsverzeichnis der App
  DATABASE_URL: 'file:./prisma/dev.db'

jobs:
  # ==========================================================================
  # Job 1: Code Quality & Linting
  # ==========================================================================
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install Dependencies
        working-directory: ./app
        run: npm ci

      - name: Run TypeScript Compiler
        working-directory: ./app
        run: npm run build

      - name: Run Linter (if configured)
        working-directory: ./app
        run: |
          if npm run lint --silent; then
            echo "✓ Linting passed"
          else
            echo "⚠ Linter not configured or failed"
          fi
        continue-on-error: true

  # ==========================================================================
  # Job 2: Unit Tests
  # ==========================================================================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install Dependencies
        working-directory: ./app
        run: npm ci

      - name: Run Prisma Generate
        working-directory: ./app
        run: npx prisma generate

      - name: Sync DB schema (Prisma DB Push)
        working-directory: ./app
        run: npx prisma db push

      - name: Run Unit Tests
        working-directory: ./app
        run: npm test -- --coverage --verbose
        env:
          NODE_ENV: test
          SESSION_SECRET: ${{ env.SESSION_SECRET }}
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          files: ./app/coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # ==========================================================================
  # Job 2b: Container Security Scan (Trivy)
  # ==========================================================================
  container-scan:
    name: Container Security Scan (Trivy)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Trivy Scan (PR tolerant)
        if: github.event_name == 'pull_request'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'
          scanners: 'vuln,secret,config'
          timeout: '5m'

      - name: Trivy Scan (strict on push)
        if: github.event_name == 'push'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          scanners: 'vuln,secret,config'
          timeout: '5m'

      - name: Upload Trivy SARIF to Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================================================
  # Job 3: Security-Header Integration Tests
  # ==========================================================================
  security-tests:
    name: Security-Header Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install Dependencies
        working-directory: ./app
        run: npm ci

      - name: Run Prisma Generate
        working-directory: ./app
        run: npx prisma generate

      - name: Sync DB schema (Prisma DB Push)
        working-directory: ./app
        run: npx prisma db push

      - name: Run Security-Header Tests (E1.2)
        working-directory: ./app
        run: npm test -- e12_tls_security_headers.test.ts --verbose
        env:
          NODE_ENV: test
          SESSION_SECRET: ${{ env.SESSION_SECRET }}
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Report Security Test Results
        if: always()
        run: |
          echo "✅ Security-Header Tests abgeschlossen"
          echo "Siehe Test-Output für Details"

  # ==========================================================================
  # Job 4: Docker Build & Integration Tests
  # ==========================================================================
  integration-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        working-directory: ./app
        run: |
          docker build -t arasul-api:ci -f Dockerfile .

      - name: Start Services (Docker Compose)
        working-directory: ./
        run: |
          # Temporäres docker-compose.ci.yml verwenden
          cp docker-compose.yml docker-compose.ci.yml
          # step-ca für CI deaktivieren (optional)
          docker compose -f docker-compose.ci.yml up -d api
        env:
          SESSION_SECRET: ${{ env.SESSION_SECRET }}

      - name: Wait for API to be ready
        run: |
          timeout 60 bash -c 'until curl -sf http://localhost:3000/health; do sleep 2; done'
          echo "✓ API ist bereit"

      - name: Test Health Endpoint
        run: |
          RESPONSE=$(curl -s http://localhost:3000/health)
          echo "Health Response: $RESPONSE"
          echo "$RESPONSE" | grep -q '"status":"ok"' || exit 1

      - name: Test Prometheus Metrics Endpoint
        run: |
          curl -s http://localhost:3000/metrics | grep -q "security_header_status" || exit 1
          echo "✓ Prometheus Metrics verfügbar"

      - name: Docker Logs (on failure)
        if: failure()
        working-directory: ./
        run: |
          docker compose -f docker-compose.ci.yml logs

      - name: Cleanup
        if: always()
        working-directory: ./
        run: |
          docker compose -f docker-compose.ci.yml down -v

  # ==========================================================================
  # Job 5: TLS & Security Validation
  # ==========================================================================
  tls-validation:
    name: TLS & Security Validation
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Start Full Stack (with Caddy)
        working-directory: ./
        run: |
          # Temporäres TLS-Override: mappe Host-Port 8443 -> Container 443, um mögliche Beschränkungen auf 443 zu vermeiden
          cat > docker-compose.tls.override.yml <<'YAML'
          services:
            caddy:
              ports:
                - "80:80"
                - "8443:443"
          YAML
          docker compose -f docker-compose.yml -f docker-compose.tls.override.yml up -d step-ca caddy api
        env:
          SESSION_SECRET: ${{ env.SESSION_SECRET }}

      - name: Wait for Services
        working-directory: ./
        run: |
          # Warte bis caddy und api Container laufen
          timeout 180 bash -c 'until docker compose -f docker-compose.yml -f docker-compose.tls.override.yml ps | grep -q "caddy.*Up"; do sleep 2; done'
          timeout 180 bash -c 'until docker compose -f docker-compose.yml -f docker-compose.tls.override.yml ps | grep -q "api.*Up"; do sleep 2; done'
          echo "✓ Services gestartet"
          echo "Warte bis API (HTTP) bereit ist..."
          timeout 180 bash -c 'until curl -sf http://localhost:3000/health; do sleep 2; done'
          echo "✓ API Health (HTTP) erreichbar"
          echo "Warte bis HTTPS (über Caddy) bereit ist..."
          timeout 180 bash -c 'until curl -skI https://localhost:8443/health | grep -q "200"; do sleep 2; done'
          echo "✓ HTTPS Health erreichbar"

      - name: Install testssl.sh
        run: |
          git clone --depth 1 https://github.com/drwetter/testssl.sh.git
          chmod +x testssl.sh/testssl.sh

      - name: Run TLS Test
        run: |
          # TLS-Test gegen localhost (Caddy)
          ./testssl.sh/testssl.sh --quiet --warnings off --severity MEDIUM localhost:443 || true
          echo "✓ TLS-Test abgeschlossen"

      - name: Validate Security Headers
        run: |
          # Security-Header prüfen (via curl)
          HEADERS=$(curl -skI https://localhost/health)
          
          echo "Checking Security Headers..."
          echo "$HEADERS" | grep -qi "strict-transport-security" && echo "✓ HSTS" || echo "✗ HSTS fehlt"
          echo "$HEADERS" | grep -qi "content-security-policy" && echo "✓ CSP" || echo "✗ CSP fehlt"
          echo "$HEADERS" | grep -qi "x-frame-options" && echo "✓ X-Frame-Options" || echo "✗ X-Frame-Options fehlt"
          echo "$HEADERS" | grep -qi "x-content-type-options" && echo "✓ X-Content-Type-Options" || echo "✗ X-Content-Type-Options fehlt"

      - name: Docker Logs (on failure)
        if: failure()
        working-directory: ./
        run: |
          docker compose -f docker-compose.yml -f docker-compose.tls.override.yml logs caddy
          docker compose -f docker-compose.yml -f docker-compose.tls.override.yml logs api

      - name: Cleanup
        if: always()
        working-directory: ./
        run: |
          docker compose -f docker-compose.yml -f docker-compose.tls.override.yml down -v

  # ==========================================================================
  # Job 6: Build Summary & Notifications
  # ==========================================================================
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint, test, security-tests, integration-tests, tls-validation]
    if: always()
    
    steps:
      - name: Check Job Status
        run: |
          echo "=== CI/CD Pipeline Summary ==="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Security Tests: ${{ needs.security-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "TLS Validation: ${{ needs.tls-validation.result }}"
          
          if [[ "${{ needs.lint.result }}" == "success" ]] && \
             [[ "${{ needs.test.result }}" == "success" ]] && \
             [[ "${{ needs.security-tests.result }}" == "success" ]] && \
             [[ "${{ needs.integration-tests.result }}" == "success" ]] && \
             [[ "${{ needs.tls-validation.result }}" == "success" ]]; then
            echo "✅ Alle Tests erfolgreich!"
            exit 0
          else
            echo "❌ Einige Tests fehlgeschlagen"
            exit 1
          fi

      # Optional: Slack/Discord Notification
      # - name: Send Notification
      #   if: failure()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}

